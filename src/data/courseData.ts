
import { CourseModule } from '@/types/course';

export const courseModules: CourseModule[] = [
  {
    id: 'fundamentals',
    title: 'Thermodynamic Fundamentals',
    description: 'Introduction to thermodynamic principles in computing systems',
    duration: '45 min',
    difficulty: 'Beginner',
    concepts: [
      {
        title: 'First Law of Thermodynamics',
        explanation: 'Energy cannot be created or destroyed, only converted from one form to another. In computing, this relates to how electrical energy is converted to heat.',
        formula: 'ΔU = Q - W'
      },
      {
        title: 'Heat Transfer Mechanisms',
        explanation: 'Three primary modes: conduction, convection, and radiation. Critical for CPU cooling design.',
        formula: 'q = k(dT/dx)'
      },
      {
        title: 'Thermal Resistance',
        explanation: 'Opposition to heat flow, analogous to electrical resistance. Key metric in thermal design.',
        formula: 'R_th = ΔT/Q'
      }
    ],
    hasVisualization: true,
    hasCodeExample: true,
    codeExample: `# Thermodynamic Heat Transfer Calculation
def heat_transfer(temp_hot, temp_cold, thermal_conductivity, area, thickness):
    """
    Calculate heat transfer rate using Fourier's law
    """
    delta_T = temp_hot - temp_cold
    heat_flux = thermal_conductivity * area * delta_T / thickness
    return heat_flux

# Example: CPU heat sink calculation
cpu_temp = 85  # °C
ambient_temp = 25  # °C
k_aluminum = 205  # W/m·K
area = 0.01  # m²
thickness = 0.005  # m

heat_rate = heat_transfer(cpu_temp, ambient_temp, k_aluminum, area, thickness)
print(f"Heat transfer rate: {heat_rate:.2f} W")`
  },
  {
    id: 'cpu-thermal',
    title: 'CPU Thermal Management',
    description: 'Understanding heat generation and dissipation in processors',
    duration: '60 min',
    difficulty: 'Intermediate',
    concepts: [
      {
        title: 'Power Dissipation',
        explanation: 'CPUs convert electrical power to computational work and waste heat. Power density is a critical design constraint.',
        formula: 'P = V² × f × C'
      },
      {
        title: 'Junction Temperature',
        explanation: 'The temperature at the semiconductor junction, critical for reliability and performance.',
        formula: 'T_j = T_a + P × R_th'
      },
      {
        title: 'Thermal Design Power (TDP)',
        explanation: 'Maximum heat generated by a CPU that the cooling system must dissipate.',
      }
    ],
    hasVisualization: true,
    hasCodeExample: true,
    codeExample: `# CPU Thermal Analysis
import numpy as np

class CPUThermalModel:
    def __init__(self, tdp, thermal_resistance):
        self.tdp = tdp  # Watts
        self.r_th = thermal_resistance  # °C/W
        
    def junction_temp(self, ambient_temp, power_ratio=1.0):
        """Calculate junction temperature"""
        actual_power = self.tdp * power_ratio
        return ambient_temp + actual_power * self.r_th
    
    def max_frequency(self, max_temp, ambient_temp):
        """Calculate maximum safe frequency"""
        max_power = (max_temp - ambient_temp) / self.r_th
        return max_power / self.tdp

# Example: Intel i7 processor
cpu = CPUThermalModel(tdp=95, thermal_resistance=0.3)
junction_temp = cpu.junction_temp(ambient_temp=25, power_ratio=0.8)
print(f"Junction temperature: {junction_temp:.1f}°C")`
  },
  {
    id: 'cooling-systems',
    title: 'Cooling System Design',
    description: 'Heat sinks, fans, and liquid cooling system analysis',
    duration: '50 min',
    difficulty: 'Intermediate',
    concepts: [
      {
        title: 'Heat Sink Design',
        explanation: 'Optimizing fin geometry for maximum heat dissipation while minimizing pressure drop.',
        formula: 'R_th = 1/(h × A_eff)'
      },
      {
        title: 'Convective Heat Transfer',
        explanation: 'Heat transfer between solid surfaces and moving fluids (air or liquid coolant).',
        formula: 'Nu = 0.023 × Re^0.8 × Pr^0.4'
      },
      {
        title: 'Fan Performance',
        explanation: 'Relationship between airflow, pressure, and cooling effectiveness.',
        formula: 'CFM = A × V'
      }
    ],
    hasVisualization: true,
    hasCodeExample: false
  },
  {
    id: 'liquid-cooling',
    title: 'Liquid Cooling Systems',
    description: 'Advanced cooling using liquid coolants and phase change',
    duration: '55 min',
    difficulty: 'Advanced',
    concepts: [
      {
        title: 'Pump Performance',
        explanation: 'Coolant flow rate and pressure drop analysis in liquid cooling loops.',
        formula: 'ΔP = f × (L/D) × (ρV²/2)'
      },
      {
        title: 'Heat Exchanger Design',
        explanation: 'Radiator effectiveness and heat transfer coefficient optimization.',
        formula: 'ε = (C_h/C_c) × [1 - exp(-NTU)]'
      },
      {
        title: 'Phase Change Cooling',
        explanation: 'Utilizing latent heat of vaporization for enhanced cooling capacity.',
        formula: 'Q = m × h_fg'
      }
    ],
    hasVisualization: true,
    hasCodeExample: true,
    codeExample: `# Liquid Cooling System Analysis
import math

class LiquidCoolingSystem:
    def __init__(self, flow_rate, specific_heat, density):
        self.flow_rate = flow_rate  # L/min
        self.cp = specific_heat  # J/kg·K
        self.density = density  # kg/L
        
    def heat_capacity_rate(self):
        """Calculate heat capacity rate"""
        mass_flow = self.flow_rate * self.density / 60  # kg/s
        return mass_flow * self.cp
    
    def temp_rise(self, heat_load):
        """Calculate coolant temperature rise"""
        C = self.heat_capacity_rate()
        return heat_load / C
    
    def effectiveness(self, ntu):
        """Heat exchanger effectiveness"""
        return 1 - math.exp(-ntu)

# Example: Custom loop analysis
coolant = LiquidCoolingSystem(flow_rate=10, specific_heat=4180, density=1.0)
temp_rise = coolant.temp_rise(heat_load=200)  # 200W heat load
print(f"Coolant temperature rise: {temp_rise:.2f}°C")`
  },
  {
    id: 'thermal-interface',
    title: 'Thermal Interface Materials',
    description: 'TIM selection and optimization for heat transfer',
    duration: '40 min',
    difficulty: 'Intermediate',
    concepts: [
      {
        title: 'Thermal Conductivity',
        explanation: 'Material property determining heat conduction rate. Higher values indicate better heat transfer.',
        formula: 'k = q × L / (A × ΔT)'
      },
      {
        title: 'Contact Resistance',
        explanation: 'Thermal resistance at the interface between two surfaces due to surface roughness.',
        formula: 'R_c = 1 / (h_c × A)'
      },
      {
        title: 'TIM Selection Criteria',
        explanation: 'Balancing thermal performance, mechanical properties, and long-term reliability.',
      }
    ],
    hasVisualization: false,
    hasCodeExample: true,
    codeExample: `# Thermal Interface Material Analysis
def thermal_resistance_analysis(k_tim, thickness, contact_resistance, area):
    """
    Calculate total thermal resistance including TIM and contact resistance
    """
    r_tim = thickness / (k_tim * area)
    r_total = r_tim + contact_resistance
    return r_tim, r_total

# Compare different TIM options
materials = {
    'Thermal Paste': {'k': 3.5, 'thickness': 0.1e-3},
    'Thermal Pad': {'k': 1.5, 'thickness': 0.5e-3},
    'Liquid Metal': {'k': 73, 'thickness': 0.05e-3}
}

area = 1e-4  # m² (1 cm²)
contact_r = 1e-4  # m²·K/W

for material, props in materials.items():
    r_tim, r_total = thermal_resistance_analysis(
        props['k'], props['thickness'], contact_r, area
    )
    print(f"{material}: R_TIM = {r_tim*1000:.2f} K/W, R_total = {r_total*1000:.2f} K/W")`
  }
];
